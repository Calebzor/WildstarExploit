-----------------------------------------------------------------------------------------------
-- Exploit: staging place for all that is poop
-- by Caleb calebzor@gmail.com
-----------------------------------------------------------------------------------------------


require "GameLib"
require "GroupLib"
require "ActionSetLib"
require "ChatSystemLib"
require "CombatFloater"
require "Tooltip"
require "Unit"
require "ApolloColor"
require "AbilityBook"

-----------------------------------------------------------------------------------------------
-- Upvalues
-----------------------------------------------------------------------------------------------

local Event_FireGenericEvent = Event_FireGenericEvent
local AbilityBook = AbilityBook
local Apollo = Apollo
local ApolloColor = ApolloColor
local setmetatable = setmetatable
local ipairs = ipairs
local pairs = pairs
local os = os
local tostring = tostring
local string = string
local math = math
local next = next
local Print = Print
local GameLib = GameLib
local Unit = Unit
local GroupLib = GroupLib
local ActionSetLib = ActionSetLib
local ChatSystemLib = ChatSystemLib
local Tooltip = Tooltip
local GetXp = GetXp
local CombatFloater = CombatFloater
local String_GetWeaselString = String_GetWeaselString

-----------------------------------------------------------------------------------------------
-- Module Definition and variables
-----------------------------------------------------------------------------------------------
--local Exploit = {}
local Exploit = {}
Exploit = Apollo.GetPackage("Gemini:Addon-1.1").tPackage:NewAddon("Exploit", false, {}, "Gemini:Timer-1.0", "Gemini:Hook-1.0")
local addon = Exploit
E = Exploit


local LibStub = _G["LibStub"]
local PKDLib = LibStub:GetLibrary("PKDLib-1.0")

function D(arg)
    PKDLib:Dump(arg)
end

function d(arg)
    PKDLib:Dump(arg)
end

function SVR(strName, var, iOptions)
    SendVarToRover(strName, var, iOptions)
    ChatSystemLib.Command("/rover")
end

-----------------------------------------------------------------------------------------------
-- Initialization
-----------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------
-- OnLoad and Enabling stuff
-----------------------------------------------------------------------------------------------
function addon:OnEnable()
    Apollo.RegisterSlashCommand("dd", "DebugPrint", self)
    Apollo.RegisterSlashCommand("de", "DebugPrint", self)
    Apollo.RegisterSlashCommand("wipe", "WipeStuck", self)
    Apollo.RegisterSlashCommand("ptarget", "TargetParty", self)

    Apollo.RegisterEventHandler("ChatMessage", "OnChatMessage", self)
    --Apollo.RegisterEventHandler("UI_XPChanged", "XPChanged", self)
    self.wAbility = Apollo.LoadForm("Exploit.xml", "AbilityForm", nil, self)
    self.XP = nil

    --Apollo.RegisterEventHandler("ChallengeCompleted",           "OnChallengeCompleted", self)

    self.wBuffs = Apollo.LoadForm("Exploit.xml", "BeneBuffBar", nil, self)
    self.wDebuffs = Apollo.LoadForm("Exploit.xml", "HarmfulBuffBar", nil, self)
    self.buffUpdaterTimer = self:ScheduleRepeatingTimer("OnFastTimer", 0.1)
    --Apollo.RegisterEventHandler("NextFrame", "OnFastTimer", self)

    self.CRBTargetFrame = nil
    self.CRBTargetFrame = Apollo.GetAddon("FastTargetFrame")
    self.nLastSize = nil


    --Apollo.RegisterEventHandler("UnitEnteredCombat", "CombatStateChanged", self)
    --Apollo.RegisterEventHandler("VendorInvokedWindow", "VendorInvoked", self)

    Apollo.RegisterEventHandler("CombatLogCCState", "OnCombatLogCCState", self)
    Apollo.RegisterEventHandler("CombatLogInterrupted", "OnCombatLogInterrupted", self)
    self.bTimerStarted = false

    Apollo.RegisterEventHandler("GenericEvent_StartCraftCastBar", "CraftingStart", self)

    --self.timerCount = 0
    --self.testTimer = self:ScheduleRepeatingTimer("TimerFeedback", 0.1)

    --self.NPrimeNameplates = Apollo.GetAddon("NPrimeNameplates")
    --self.getNameplateTimer = self:ScheduleRepeatingTimer("GetNamePlates",1)

    self.VTargetFrame = Apollo.GetAddon("VikingUnitFrames")
    self.VTargetFrame2 = Apollo.GetAddon("VikingTargetFrame")
    --self.getVTargetFrameTimer = self:ScheduleRepeatingTimer("GetVikingUnitFrames",1)
    --Apollo.GetAddon("BijiPlates"):OptionsChanged()

    -- Apollo.RegisterEventHandler("UnitCreated", "UnitCreated", self)
end

function addon:CloseCraftingSummary()
    local w = Apollo.FindWindowByName("CraftingSummaryCloseBtn")
    if w then
        Event_FireGenericEvent("GenericEvent_CraftingSummary_Closed", "GenericEvent_CraftingSummary_Closed")
    end
end

function addon:CraftingStart()
    self.craftingSummaryWatcherTimer = self:ScheduleTimer("CloseCraftingSummary",3)
end

-- function addon:UnitCreated(unit)
--     if unit and unit:GetName() == "Deathtouch Scrab" then
--         D("scarab found")
--         if unit:GetLocation() then
--             D(unit:GetPosition())
--         end
--         if unit:GetTarget() then
--             D(unit:GetTarget():GetName())
--         end
--     end
-- end

function addon:GetVikingUnitFrames()
    if self.VTargetFrame2 then
        --D("poop")
        self:CancelTimer(self.getVTargetFrameTimer)
        self.getVTargetFrameTimer = nil
        self:PostHook(self.VTargetFrame2, "SetTargetHealthAndShields")
        --self:PostHook(self.NPrimeNameplates, "InitNameplate")
    else
        self.VTargetFrame2 = Apollo.GetAddon("VikingTargetFrame")
    end
end

function addon:SetTargetHealthAndShields(luaCaller, wndTargetFrame, unitTarget)
    D("poop")
    --local nHealthCurr = unitTarget:GetHealth()
    --local nHealthMax = unitTarget:GetMaxHealth()
    --local strHealthMax = self:HelperFormatBigNumber(nHealthMax)
    --local strHealthCurr = self:HelperFormatBigNumber(nHealthCurr)
    --luaCaller.wndLargeFrame:FindChild("HealthText"):SetTooltip(string.format("%s: %s / %s (%s)", Apollo.GetString("Innate_Health"), strHealthCurr, strHealthMax, String_GetWeaselString(Apollo.GetString("CRB_Percent"), nHealthCurr/nHealthMax*100)))
end

function addon:GetNamePlates()
    if self.NPrimeNameplates then
        self:CancelTimer(self.getNameplateTimer)
        self.getNameplateTimer = nil
        self:PostHook(self.NPrimeNameplates, "UpdateNameplateLayout")
        --self:PostHook(self.NPrimeNameplates, "InitNameplate")
    else
        self.NPrimeNameplates = Apollo.GetAddon("NPrimeNameplates")
    end
end

local _classColors =
{
    [GameLib.CodeEnumClass.Esper]           = ApolloColor.new("ff07a8df"),
    [GameLib.CodeEnumClass.Medic]           = ApolloColor.new("ff96cd18"),
    [GameLib.CodeEnumClass.Stalker]         = ApolloColor.new("ffb137f6"),
    [GameLib.CodeEnumClass.Warrior]         = ApolloColor.new("ffde1818"),
    [GameLib.CodeEnumClass.Engineer]        = ApolloColor.new("fffae843"),
    [GameLib.CodeEnumClass.Spellslinger]    = ApolloColor.new("ffec8626"),
}

function addon:UpdateNameplateLayout(luaCaller, p_nameplate)
    local l_isPlayer = p_nameplate.unit:GetType() == "Player"

    if p_nameplate.unitClassID and l_isPlayer then
        p_nameplate.bars.health.bar:SetBarColor(_classColors[p_nameplate.unitClassID])
        --local l,t,r,b = p_nameplate.bars.health.bar:GetParent():GetAnchorOffsets()
        --p_nameplate.bars.health.bar:GetParent():SetAnchorOffsets(l,t,r,b+10)
    end
    if p_nameplate.containerBars and p_nameplate.containerBars:IsShown() then
        p_nameplate.containerBars:SetAnchorOffsets(0, 0, 0, 20)
    end
    if p_nameplate.bars.shield and p_nameplate.bars.shield.bar then
        p_nameplate.bars.shield.bar:SetBarColor(ApolloColor.new("ff00FFFF"))
    end
end

function addon:InitNameplate(luaCaller, p_unit, p_nameplate, p_target)
    --if not p_nameplate then return end
    --local l,t,r,b = p_nameplate.containerBars:GetAnchorOffsets()
    --p_nameplate.containerBars:SetAnchorOffsets(l,t,r,b+10)
    --return p_nameplate
end

function addon:TimerFeedback()
  self.timerCount = self.timerCount + 1
  Print(("%.2f seconds passed"):format(0.01 * self.timerCount))
  -- run 30 seconds in total
  if self.timerCount == 100 then
    self:CancelTimer(self.testTimer)
  end
end

function addon:TargetParty(_, sName)
    for i=1, GroupLib.GetMemberCount() do
        local unit = GroupLib.GetUnitForGroupMember(i)
        if unit then
            if unit:GetName():lower():find(sName:lower())  then
                GameLib.SetTargetUnit(unit)
                return
            end
        end
    end
end

function addon:WipeStuck()
    GameLib.SupportStuck(GameLib.SupportStuckAction.RecallDeath)
end

function addon:FastUpdateTimer()
    self.nUpdateTimer = self.nUpdateTimer + self.nTimeIncrement
    --D(self.nUpdateTimer)
end

function addon:StartTimer()
    if not self.bTimerStarted then
        self.nUpdateTimer = 0
        self.nTimeIncrement = 0.1
        self.nLastInterrupt = 0
        self.nIACounter = 0
        --Apollo.CreateTimer("FastUpdateTimer", self.nTimeIncrement, true)
        --Apollo.StartTimer("FastUpdateTimer")
        --Apollo.RegisterTimerHandler("FastUpdateTimer", "FastUpdateTimer", self)
        self.bTimerStarted = self:ScheduleRepeatingTimer("FastUpdateTimer", self.nTimeIncrement )
    end
end

function getAbilityAndSpellIdFromAbilityName(sAbilityName)
    for nAbilityIndex, tData in pairs(AbilityBook.GetAbilitiesList()) do
        if AbilityBook.GetAbilitiesList()[nAbilityIndex].tTiers[1].strName:lower() == sAbilityName:lower() then
            return ("AbilityId: %d SpellId: %d"):format(AbilityBook.GetAbilitiesList()[nAbilityIndex].tTiers[#AbilityBook.GetAbilitiesList()[nAbilityIndex].tTiers].nId, AbilityBook.GetAbilitiesList()[nAbilityIndex].tTiers[1].splObject:GetId())
        end
    end
    return "not found"
end

function addon:OnCombatLogCCState(tEventArgs)
    if tEventArgs.eResult == CombatFloater.CodeEnumCCStateApplyRulesResult.Target_InterruptArmorReduced and tEventArgs.unitTarget and (tEventArgs.unitTarget:GetName() == "Gloomclaw" or tEventArgs.unitTarget:GetName() == "Golgox the Lifecrusher" or tEventArgs.unitTarget:GetName() == "Defragmentation Unit"or tEventArgs.unitTarget:GetName() == "Dreadphage Ohmna" or tEventArgs.unitTarget:GetName() == "Terax Blightweaver" or tEventArgs.unitTarget:GetName() == "Ersoth Curseform" or tEventArgs.unitTarget:GetName() == "Holo Hand" or tEventArgs.unitTarget:GetName() == "Megalith" or tEventArgs.unitTarget:GetName() == "Bio-Web Cocoon" or tEventArgs.unitTarget:GetName() == "Malfunctioning Gear" or tEventArgs.unitTarget:GetName() == "Weather Station" or tEventArgs.unitTarget:GetName() =="Phageborn Brute" or tEventArgs.unitTarget:GetName() == "Ravenous Maw of the Dreadphage" or (tEventArgs.unitTarget:GetName() == "Null System Daemon" and tEventArgs.unitTarget:GetHealth()/tEventArgs.unitTarget:GetMaxHealth() < 0.7) or (tEventArgs.unitTarget:GetName() == "Binary System Daemon" and tEventArgs.unitTarget:GetHealth()/tEventArgs.unitTarget:GetMaxHealth() < 0.7))  and tEventArgs.unitCaster then
        self:StartTimer()
        self.nIACounter = self.nIACounter + tEventArgs.nInterruptArmorHit
        if self.nIACounter == 5 and tEventArgs.unitTarget:GetName() == "Malfunctioning Gear" then
            ChatSystemLib.Command("/p ==============")
            self.nIACounter = 0
        end
        local perc = math.floor(tEventArgs.unitTarget:GetCastElapsed()*100/tEventArgs.unitTarget:GetCastDuration())
        ChatSystemLib.Command(("/p %s did -%d IA with %s on (id: %d) now: %d IA - time since last: %.2fs - during cast: %d%%"):format(tEventArgs.unitCaster:GetName(), tEventArgs.nInterruptArmorHit, tEventArgs.splCallingSpell:GetName(), tEventArgs.unitTarget:GetId(), tEventArgs.unitTarget:GetInterruptArmorValue(), self.nUpdateTimer-self.nLastInterrupt, perc))
        self.nLastInterrupt = self.nUpdateTimer
    end
end

function addon:OnCombatLogInterrupted(tEventArgs)
    if tEventArgs.unitTarget and (tEventArgs.unitTarget:GetName() == "Phageborn Brute" or tEventArgs.unitTarget:GetName() == "Ravenous Maw of the Dreadphage")then
        ChatSystemLib.Command(("/p %s did interrupt with %s on (id: %d) - time since last: %.2fs"):format(tEventArgs.unitCaster:GetName(), tEventArgs.splInterruptingSpell:GetName(), tEventArgs.unitTarget:GetId(), self.nUpdateTimer-self.nLastInterrupt))
        self.nLastInterrupt = self.nUpdateTimer
    end
end

do
    local wipe = false
    function addon:WipeCheck()
        wipe = true
        for i = 1, GroupLib.GetMemberCount() do
            if GroupLib.GetUnitForGroupMember(i):IsInCombat() then
                wipe = false
            end
        end
        if wipe then
            D("It's a wipe")
        end
        -- GetUnitForGroupMember
        --unit:IsDead()
    end

    -- function addon:StartCheckingForWipe()
    --     wipe = false
    --     if not addon:CheckForWipe() then
    --         Apollo.RegisterTimerHandler("WipeCheck", "WipeCheck", self)
    --         Apollo.CreateTimer("WipeCheck", 1, false)
    --     else
    --         D("It's a wipe")
    --         wipe = true
    --     end
    -- end

    function addon:CombatStateChanged(unit, bInCombat)
        --D(unit:GetName())
        if unit == GameLib.GetPlayerUnit() then
            --D("PLAYER CHANGED COMBAT STATE")
            --D(bInCombat)
            --D(unit:GetName())
        end
    end
end

--function addon:VendorInvoked(unitArg)
--  local aVendor = Apollo.GetAddon("Vendor")
--  D(aVendor.wndVendor:FindChild("VendorName"):GetText())
--end

function addon:OnChallengeCompleted(idChallenge, strHeader, strDescription, fDuration)
    --for k, v in pairs(ChallengesLib.GetActiveChallengeList()) do if v:GetName():lower():find("in the box") then D(v:GetTimeStr()) end end
    --D(idChallenge)
    --D(strHeader)
    --D(strDescription)
    --D(fDuration)
end

local nInterrupt = 0
local nLastFive = os.time()
function addon:OnFastTimer()
    local uPlayer = GameLib.GetPlayerUnit()
    if not uPlayer then return end -- none of these should do anything if the player unit is not created yet
    --GameLib.UIExitCinematics();
    -- buff bar stuff
    self.wBuffs:SetUnit(uPlayer)
    local buffs = self.wBuffs:GetChildren()
    if not self.nLastSize or #buffs ~= self.nLastSize then
        local height = self.wBuffs:GetHeight()
        local l,t,r,b = self.wBuffs:GetAnchorOffsets()
        self.wBuffs:SetAnchorOffsets(r-(height*#buffs), t, r, b)
        self.nLastSize = #buffs
    end

    self.wDebuffs:SetUnit(uPlayer)
    local buffs =self.wDebuffs:GetChildren()
    if not self.nLastSize or #buffs ~= self.nLastSize then
        local height = self.wDebuffs:GetHeight()
        local l,t,r,b = self.wDebuffs:GetAnchorOffsets()
        self.wDebuffs:SetAnchorOffsets(r-(height*#buffs), t, r, b)
        self.nLastSize = #buffs
    end

    if self.CRBTargetFrame then
        if self.CRBTargetFrame.luaUnitFrame and self.CRBTargetFrame.luaUnitFrame.wndLargeFrame then
            self.CRBTargetFrame.luaUnitFrame.wndLargeFrame:FindChild("BeneBuffBar"):Show(false)
            self.CRBTargetFrame.luaUnitFrame.wndLargeFrame:FindChild("HarmBuffBar"):Show(false)
        end
        --Apollo.GetAddon("TargetFrame").luaUnitFrame.wndLargeFrame:FindChild("BeneBuffBar"):Show(false)
    else
        self.CRBTargetFrame = Apollo.GetAddon("TargetFrame")
    end

    if self.VTargetFrame then
        if self.VTargetFrame.tPlayerFrame and self.VTargetFrame.tPlayerFrame.wndUnitFrame then
            self.VTargetFrame.tPlayerFrame.wndUnitFrame:FindChild("Buffs"):Show(false)
            --self.VTargetFrame.tPlayerFrame.wndUnitFrame:FindChild("BeneBuffBar"):Show(false)
            --self.VTargetFrame.tPlayerFrame.wndUnitFrame:FindChild("HarmBuffBar"):Show(false)
        end
        --Apollo.GetAddon("TargetFrame").luaUnitFrame.wndLargeFrame:FindChild("BeneBuffBar"):Show(false)
    else
        self.VTargetFrame = Apollo.GetAddon("VikingUnitFrames")
    end
    --local uTarget = GameLib.GetTargetUnit()
    --if not uTarget then return end
    --if uTarget:GetName() == "Malfunctioning Gear" then
    --  if nInterrupt ~= 5 and uTarget:GetInterruptArmorValue() == 5 then
    --      D(os.time()-nLastFive .. " " .. math.floor(uTarget:GetCastElapsed()*100/uTarget:GetCastDuration()))
    --  end
    --  if nInterrupt ~= 4 and uTarget:GetInterruptArmorValue() == 4 then
    --      nLastFive = os.time()
    --  end
    --  nInterrupt = uTarget:GetInterruptArmorValue()
    --end
end

function addon:OnBuffToolTip(wndHandler, wndControl, eType, spl)
    if wndControl == wndHandler then
        return nil
    end
    Tooltip.GetBuffTooltipForm(self, wndControl, spl)
end

-----------------------------------------------------------------------------------------------
-- Utility
-----------------------------------------------------------------------------------------------
function addon:HelperFormatBigNumber(nArg)
    local strResult = ""
    if nArg < 1000 then
        strResult = tostring(nArg)
    elseif nArg < 1000000 then
        if math.floor(nArg%1000/100) == 0 then
            strResult = String_GetWeaselString(Apollo.GetString("TargetFrame_ShortNumberWhole"), math.floor(nArg / 1000))
        else
            strResult = String_GetWeaselString(Apollo.GetString("TargetFrame_ShortNumberFloat"), nArg / 1000)
        end
    elseif nArg < 1000000000 then
        if math.floor(nArg%1000000/100000) == 0 then
            strResult = String_GetWeaselString(Apollo.GetString("TargetFrame_MillionsNumberWhole"), math.floor(nArg / 1000000))
        else
            strResult = String_GetWeaselString(Apollo.GetString("TargetFrame_MillionsNumberFloat"), nArg / 1000000)
        end
    elseif nArg < 1000000000000 then
        if math.floor(nArg%1000000/100000) == 0 then
            strResult = String_GetWeaselString(Apollo.GetString("TargetFrame_BillionsNumberWhole"), math.floor(nArg / 1000000))
        else
            strResult = String_GetWeaselString(Apollo.GetString("TargetFrame_BillionsNumberFloat"), nArg / 1000000)
        end
    else
        strResult = tostring(nArg)
    end
    return strResult
end

-- Apollo.GetAddon("Exploit"):getSpellIdByNameFromLAS("Crush")
function addon:getSpellIdByNameFromLAS(sSpellName)
    local tCurrLAS = ActionSetLib.GetCurrentActionSet()
    for index, nAbilityId in pairs(tCurrLAS) do
        self.wAbility:SetAbilityId(nAbilityId) -- this is an Ability Item Window
        if nAbilityId and nAbilityId > 0 then -- only check non empty slots
            if GameLib.GetSpell(self.wAbility:GetAbilityTierId()):GetName() == sSpellName then
                return GameLib.GetSpell(self.wAbility:GetAbilityTierId()):GetId()
            end
        end
    end
    return false
end

function addon:SendChatCommand(sCommand, sTarget, sMessage)
    ChatSystemLib.Command(("/%s %s %s"):format(sCommand, sTarget, sMessage))
end

function addon:XPChanged()
    if GameLib.GetPlayerUnit():GetName() == "CalebS" then
        if not self.XP then self.XP = GetXp() end
        --self:SendChatCommand("whisper", "Caleb", GetXp()-self.XP)
        self.XP = GetXp()
    end
end

function addon:OnChatMessage(channelCurrent, tMessage)
    -- tMessage has bAutoResponse, bGM, bSelf, strSender, strRealmName, nPresenceState, arMessageSegments, unitSource, bShowChatBubble, bCrossFaction, nReportId
    --local eChannelType = channelCurrent:GetType()
    --if eChannelType == ChatSystemLib.ChatChannel_Whisper then
    --  --local strMessage = ""
    --  --for idx, tSegment in ipairs( tMessage.arMessageSegments ) do
    --  --  strMessage = strMessage .. tSegment.strText
    --  --end
    --  --if string.lower(strMessage) == "invite" or string.lower(strMessage) == "inv" then
    --  ----    GroupLib.Invite(tMessage.strSender)
    --  --end
    --elseif eChannelType == ChatSystemLib.ChatChannel_Party then
    --  local strMessage = ""
    --  for idx, tSegment in ipairs(tMessage.arMessageSegments) do
    --      strMessage = strMessage .. tSegment.strText
    --  end
    --  local nChannelSlash
    --  for k, v in pairs(ChatSystemLib.GetChannels()) do
    --      if v:GetName() == "PartyChatForTyriusAndTT" then
    --          nChannelSlash = v:GetCommand()
    --      end
    --  end
    --  if nChannelSlash then
    --      ChatSystemLib.Command(("/%s %s: %s"):format(nChannelSlash, tMessage.strSender, strMessage))
    --  end
    --elseif eChannelType == ChatSystemLib.ChatChannel_Society then
    --  --SendVarToRover("Society", channelCurrent)
    --  if not tMessage.strSender:lower():find("caleb") and channelCurrent:GetName() == "PartyChatForTyriusAndTT" then
    --      local strMessage = ""
    --      for idx, tSegment in ipairs( tMessage.arMessageSegments ) do
    --          strMessage = strMessage .. tSegment.strText
    --      end
    --      if GameLib.GetPlayerUnit():IsInYourGroup() then
    --          ChatSystemLib.Command(("/p %s: %s"):format(tMessage.strSender, strMessage))
    --      end
    --  end
    --end
end


function addon:DebugPrint(sSlashShorthand, sInput)
    local sConsole = ""
    local result, loadError = loadstring(sInput)
    -- Print result to console
    if result == nil or loadError then
        sConsole = sConsole .. "Error parsing statement: \n" .. loadError .. "\n"       -- Parse error
    else
        -- Run code in protected mode to catch runtime errors
        local status, callResult = pcall(result)
        D(result)
        -- GameLib.GetPlayerUnit()
        if status == false then
            sConsole = sConsole .. "Error executing statement: \n" .. callResult .. "\n"        -- Execute error
        else
            sConsole = callResult
        end
    end
    D(sConsole)
end

function addon:GetSpellIds(spellName)
    for i=1, 10000000 do
        local spell = GameLib.GetSpell(i)
        if spell:GetName() == spellName then
            D(spell:GetId())
            D(spell:GetFlavor())
            D("------")
        end
    end
end

-----------------------------------------------------------------------------------------------
-- Event handlers
-----------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------
-- GUI and SavedVariables
-----------------------------------------------------------------------------------------------

function addon:OnSave(eLevel)
    if eLevel ~= GameLib.CodeEnumAddonSaveLevel.Character then return end

end

function addon:OnRestore(eLevel, tData)
    if eLevel ~= GameLib.CodeEnumAddonSaveLevel.Character then return end
end

-----------------------------------------------------------------------------------------------
-- Instance
-----------------------------------------------------------------------------------------------
--local ExploitInst = addon:new()
--ExploitInst:Init()
